# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dap
else:
    import _dap

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SizeTPtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dap.SizeTPtr_swiginit(self, _dap.new_SizeTPtr())
    __swig_destroy__ = _dap.delete_SizeTPtr

    def assign(self, value):
        return _dap.SizeTPtr_assign(self, value)

    def value(self):
        return _dap.SizeTPtr_value(self)

    def cast(self):
        return _dap.SizeTPtr_cast(self)

    @staticmethod
    def frompointer(t):
        return _dap.SizeTPtr_frompointer(t)

# Register SizeTPtr in _dap:
_dap.SizeTPtr_swigregister(SizeTPtr)
class UInt8Ptr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _dap.UInt8Ptr_swiginit(self, _dap.new_UInt8Ptr())
    __swig_destroy__ = _dap.delete_UInt8Ptr

    def assign(self, value):
        return _dap.UInt8Ptr_assign(self, value)

    def value(self):
        return _dap.UInt8Ptr_value(self)

    def cast(self):
        return _dap.UInt8Ptr_cast(self)

    @staticmethod
    def frompointer(t):
        return _dap.UInt8Ptr_frompointer(t)

# Register UInt8Ptr in _dap:
_dap.UInt8Ptr_swigregister(UInt8Ptr)
class Equatable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def equals(self, a, b):
        return _dap.Equatable_equals(self, a, b)
    __swig_destroy__ = _dap.delete_Equatable

    def __init__(self):
        if self.__class__ == Equatable:
            _self = None
        else:
            _self = self
        _dap.Equatable_swiginit(self, _dap.new_Equatable(_self, ))
    def __disown__(self):
        self.this.disown()
        _dap.disown_Equatable(self)
        return weakref.proxy(self)

# Register Equatable in _dap:
_dap.Equatable_swigregister(Equatable)
class StateChangeListener(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def on_state_change(self, state):
        return _dap.StateChangeListener_on_state_change(self, state)
    __swig_destroy__ = _dap.delete_StateChangeListener

    def __init__(self):
        if self.__class__ == StateChangeListener:
            _self = None
        else:
            _self = self
        _dap.StateChangeListener_swiginit(self, _dap.new_StateChangeListener(_self, ))
    def __disown__(self):
        self.this.disown()
        _dap.disown_StateChangeListener(self)
        return weakref.proxy(self)

# Register StateChangeListener in _dap:
_dap.StateChangeListener_swigregister(StateChangeListener)

def register_eq_wrapper(e):
    return _dap.register_eq_wrapper(e)

def launch_simulation_wrapper(rules, s0, port, neighborhood, listener):
    return _dap.launch_simulation_wrapper(rules, s0, port, neighborhood, listener)
class UInt8Array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        _dap.UInt8Array_swiginit(self, _dap.new_UInt8Array(nelements))
    __swig_destroy__ = _dap.delete_UInt8Array

    def __getitem__(self, index):
        return _dap.UInt8Array___getitem__(self, index)

    def __setitem__(self, index, value):
        return _dap.UInt8Array___setitem__(self, index, value)

    def cast(self):
        return _dap.UInt8Array_cast(self)

    @staticmethod
    def frompointer(t):
        return _dap.UInt8Array_frompointer(t)

    def data(self):
        return _dap.UInt8Array_data(self)

# Register UInt8Array in _dap:
_dap.UInt8Array_swigregister(UInt8Array)
class SerializedData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def to_bytes(self):
        return _dap.SerializedData_to_bytes(self)

    def get_size(self):
        return _dap.SerializedData_get_size(self)
    data = property(_dap.SerializedData_data_get, _dap.SerializedData_data_set)
    size = property(_dap.SerializedData_size_get, _dap.SerializedData_size_set)

    def __init__(self):
        _dap.SerializedData_swiginit(self, _dap.new_SerializedData())
    __swig_destroy__ = _dap.delete_SerializedData

# Register SerializedData in _dap:
_dap.SerializedData_swigregister(SerializedData)

def pack(data):
    return _dap.pack(data)
class MSet_Neighbour(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    elements = property(_dap.MSet_Neighbour_elements_get, _dap.MSet_Neighbour_elements_set)
    size = property(_dap.MSet_Neighbour_size_get, _dap.MSet_Neighbour_size_set)

    def __init__(self):
        _dap.MSet_Neighbour_swiginit(self, _dap.new_MSet_Neighbour())
    __swig_destroy__ = _dap.delete_MSet_Neighbour

# Register MSet_Neighbour in _dap:
_dap.MSet_Neighbour_swigregister(MSet_Neighbour)

def MSet_Neighbour_create(initial_size):
    return _dap.MSet_Neighbour_create(initial_size)

def MSet_Neighbour_destroy(set):
    return _dap.MSet_Neighbour_destroy(set)

def MSet_Neighbour_set(set, index, value):
    return _dap.MSet_Neighbour_set(set, index, value)

def MSet_Neighbour_get(set, index):
    return _dap.MSet_Neighbour_get(set, index)
class MSet_Token(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    elements = property(_dap.MSet_Token_elements_get, _dap.MSet_Token_elements_set)
    size = property(_dap.MSet_Token_size_get, _dap.MSet_Token_size_set)

    def __init__(self):
        _dap.MSet_Token_swiginit(self, _dap.new_MSet_Token())
    __swig_destroy__ = _dap.delete_MSet_Token

# Register MSet_Token in _dap:
_dap.MSet_Token_swigregister(MSet_Token)

def MSet_Token_create(initial_size):
    return _dap.MSet_Token_create(initial_size)

def MSet_Token_destroy(set):
    return _dap.MSet_Token_destroy(set)

def MSet_Token_set(set, index, value):
    return _dap.MSet_Token_set(set, index, value)

def MSet_Token_get(set, index):
    return _dap.MSet_Token_get(set, index)
class DAPState(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    tokens = property(_dap.DAPState_tokens_get, _dap.DAPState_tokens_set)
    msg = property(_dap.DAPState_msg_get, _dap.DAPState_msg_set)

    def __init__(self):
        _dap.DAPState_swiginit(self, _dap.new_DAPState())
    __swig_destroy__ = _dap.delete_DAPState

# Register DAPState in _dap:
_dap.DAPState_swigregister(DAPState)
class Rule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    preconditions = property(_dap.Rule_preconditions_get, _dap.Rule_preconditions_set)
    rate = property(_dap.Rule_rate_get, _dap.Rule_rate_set)
    effects = property(_dap.Rule_effects_get, _dap.Rule_effects_set)
    msg = property(_dap.Rule_msg_get, _dap.Rule_msg_set)

    def __init__(self):
        _dap.Rule_swiginit(self, _dap.new_Rule())
    __swig_destroy__ = _dap.delete_Rule

# Register Rule in _dap:
_dap.Rule_swigregister(Rule)
class MSet_Rule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    elements = property(_dap.MSet_Rule_elements_get, _dap.MSet_Rule_elements_set)
    size = property(_dap.MSet_Rule_size_get, _dap.MSet_Rule_size_set)

    def __init__(self):
        _dap.MSet_Rule_swiginit(self, _dap.new_MSet_Rule())
    __swig_destroy__ = _dap.delete_MSet_Rule

# Register MSet_Rule in _dap:
_dap.MSet_Rule_swigregister(MSet_Rule)

def MSet_Rule_create(initial_size):
    return _dap.MSet_Rule_create(initial_size)

def MSet_Rule_destroy(set):
    return _dap.MSet_Rule_destroy(set)

def MSet_Rule_set(set, index, value):
    return _dap.MSet_Rule_set(set, index, value)

def MSet_Rule_get(set, index):
    return _dap.MSet_Rule_get(set, index)

def launch_simulation(rules, s0, port, neighborhood, on_state_change):
    return _dap.launch_simulation(rules, s0, port, neighborhood, on_state_change)

def register_equatable(equals_fn):
    return _dap.register_equatable(equals_fn)

