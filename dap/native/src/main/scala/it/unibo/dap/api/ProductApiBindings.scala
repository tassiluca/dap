package it.unibo.dap.api

import scala.scalanative.unsafe.Size.intToSize
import scala.language.postfixOps
import scala.scalanative.unsafe.*

import it.unibo.dap.CUtils.freshPointer
import it.unibo.dap.api.ProductAPI.ADTs.*

import libdap.aliases.Token as CToken
import libdap.structs.{
  DAPState as CDAPState,
  MSet_Neighbour as CMSetNeighbour,
  MSet_Token as CMSetToken,
  Rule as CRule,
  *,
}

/** Bindings from / to Scala Native <==> Product API types.
  * Scala Native types are generated by Bindgen from the C header file and are available in
  * `libdap` package under `src/managed` target directory.
  */
object ProductApiBindings:

  given Conversion[CMSetToken, MSet[Token]] = m =>
    MSet(
      (0 until m.size.toInt)
        .map(i => m.elements(i))
        .map(t => fromCString((!t.value).token))
        .toList*,
    )

  extension (m: MSet[Token])

    def toCMSetToken(using Zone): Ptr[CMSetToken] =
      val cmset = CMSetToken()
      m.elems.zipWithIndex.foreach { case (t, i) =>
        val tokenImpl: Ptr[TokenImpl] = TokenImpl(toCString(t))
        val token: Ptr[CToken] = freshPointer[CToken]()
        !token = CToken(tokenImpl)
        cmset(i).elements = token
      }
      (!cmset).size = m.elems.size.toCSize
      cmset

  given Conversion[CMSetNeighbour, Set[Neighbour]] = m =>
    (0 until m.size.toInt)
      .map(i => m.elements(i))
      .map(n => fromCString(n.value))
      .toSet

  given Conversion[CToken, Option[Token]] = t => Option(t).map(t => fromCString((!t.value).token))

  extension (t: Option[Token]) def toCToken(using Zone): CToken = CToken(TokenImpl(toCString(t.getOrElse(""))))

  given ruleCvt: Conversion[CRule, Rule] = r =>
    val rateF = (_: MSet[Token]) => r.rate(r.preconditions)
    Rule(pre = r.preconditions, rateExp = rateF, eff = r.effects, msg = r.msg)

  given Conversion[CDAPState, State] = s => State(tokens = s.tokens, msg = s.msg)

  extension (s: State)
    def toDAPState(using Zone): Ptr[CDAPState] = CDAPState(tokens = !s.tokens.toCMSetToken, msg = s.msg.toCToken)
end ProductApiBindings
