package it.unibo.dap.api

import scala.scalanative.unsafe.Size.intToSize
import scala.language.postfixOps
import scala.scalanative.unsafe.*
import it.unibo.dap.utils.CUtils.freshPointer
import libdap.aliases.Token as CToken
import libdap.structs.{
  DAPState as CDAPState,
  MSet_Neighbour as CMSetNeighbour,
  MSet_Token as CMSetToken,
  Rule as CRule,
}

import scala.scalanative.libc.stddef

/** Bindings from / to Scala Native <==> Product API types.
  * Scala Native types are generated by Bindgen from the C header file and are available in
  * `libdap` package under `src/managed` target directory.
  */
object NativeProductApi extends ProductAPI:

  object NativeADTs extends ADTs:
    override type Token = CToken

    export Bindings.{ *, given }

    object Bindings:

      given Conversion[Ptr[CMSetToken], MSet[Token]] = m =>
        MSet(
          (0 until (!m).size.toInt)
            .map(i => (!m).elements(i))
            .toList*,
        )

      extension (m: MSet[Token])

        def toCMSetToken(using Zone): Ptr[CMSetToken] =
          val cmset = CMSetToken()
          (!cmset).size = m.elems.size.toCSize
          val elems = freshPointer[CToken](m.elems.size)
          (!cmset).elements = elems
          m.elems.zipWithIndex.foreach: (t, i) =>
            elems(i) = CToken(t.value)
          cmset

      given Conversion[CMSetNeighbour, Set[Neighbour]] = m =>
        (0 until m.size.toInt)
          .map(i => m.elements(i))
          .map(n => fromCString(n.value))
          .toSet

      given Conversion[CToken, Option[Token]] = Option(_)

      extension (t: Option[Token]) def toCToken(using Zone): CToken = CToken(t.map(_.value).orNull)

      given ruleCvt: Conversion[CRule, Rule] = r =>
        val rateF = (_: MSet[Token]) => r.rate(r.preconditions)
        Rule(pre = r.preconditions, rateExp = rateF, eff = r.effects, msg = r.msg)

      given Conversion[CDAPState, State] = s => State(tokens = s.tokens, msg = s.msg)

      extension (s: State)
        def toDAPState(using Zone): Ptr[CDAPState] = CDAPState(tokens = s.tokens.toCMSetToken, msg = s.msg.toCToken)
    end Bindings
  end NativeADTs
end NativeProductApi
